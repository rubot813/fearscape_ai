#ifndef TETRIS_AI_HPP
#define TETRIS_AI_HPP

#include "pixel_field.hpp"
#include "figure.hpp"

/*
	Класс описывает логику искусственного интеллекта для игры в тетрис и подобные
	Его задача - получить текущую фигуру и состояние поля, и в соответствии с алгоритмом выдать структуру move_variant_s
	которая описывает куда и как положить заданную фигуру
*/

class tetris_ai_c {
	public:
		tetris_ai_c( void );
		~tetris_ai_c( void );

		// Структура варианта перемещения фигуры
		struct move_variant_s {
			// Позиция относительно начального положения фигуры ( на верху экрана и по центру )
			// Положительное значение - перемещение направо, отрицательное значение - перемещение налево
			// >0 перемещение на pos клеток направо
			// <0 перемешение на -pos клеток налево
			int8_t	position;

			// Вращение фигуры
			figure_c::rotation_e rotation;
		};

		// Структура высоты поля
		struct height_s {
			std::vector< uint8_t > data;	// Данные
			bool valid;						// Флаг верности данных
		};

		// Метод возвращает текущее значение высот поля
		height_s* get_current_height( void );

		// Метод возвращает количество отверстий в поле
		uint8_t	get_current_holes_count( void );

		// Метод просчитывает наилучший ход без стратегии
		// Ищет вариант постановки фигуры без создания отверстий
		// Если такой ход невозможен и отверстия будут всегда, ищет ход в котором он может собрать линию
		// Если и такой ход невозможен кидает фигуру в наилучшую позицию ( хз что она из себя представляет )
		move_variant_s ai_calc_bm_noholes( cell_field_c *cell_field, figure_c *figure );

	private:

		// Метод рассчитывает значения высоты для заданного поля
		height_s _calculate_height( cell_field_c *cell_field );

		// Метод считает количество отверстий в заданном поле
		uint8_t _calculate_holes( cell_field_c *cell_field );

		// Высота последнего посчитанного поля ( 0 - нет блока, 1 - n количество блоков по вертикали )
		// Размер зависит от ширины поля cell_field_c
		// Обновляется после вызовов методов ai_calc_
		height_s _height;

		// Количество отверстий последнего посчитанного поля
		// Отверстие - пустая клетка над которой есть одна или более занятых
		uint8_t	_holes;
};

#endif // TETRIS_AI_HPP
